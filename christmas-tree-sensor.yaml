esphome:
  name: christmas_tree_sensor
  friendly_name: Christmas Tree Sensor
  # turn on the LED white at boot
  on_boot:
    then:
      - light.control:
          id: neopixel_light
          state: on
          effect: "Flicker"
          red: 50%
          green: 50%
          blue: 50%

esp32:
  board: adafruit_feather_esp32_v2
  framework:
    type: arduino

# Enable logging
logger:

# Not using this anymore - switched to MQTT so I can send custom signals needed to remotely keep device awake for OTA DFU
# Enable Home Assistant API
# api:
#   encryption:
#     key: <your key here>

# Defines a script that can be called elsewhere in the YAML that prevents the device from sleeping
script:
  id: keep_awake
  then:
    - logger.log: "OTA mode ON"
    - deep_sleep.prevent: deep_sleep_1
    - light.control:
        id: neopixel_light
        state: on
        effect: "Fast Pulse"
        red: 0
        green: 0
        blue: 50%

# Configure the MQTT connection
mqtt:
  broker: 192.168.1.63
  username: !secret mqtt_user
  password: !secret mqtt_password
  # clearing birth and will messages allows device to show up in HA as available while asleep
  birth_message:
  will_message:
  on_message:
    # Keep the device awake if "ON" is published to the "ota_mode" topic
    - topic: christmas_tree_sensor/ota_mode
      payload: 'ON'
      then:
        - script.execute:
            id: keep_awake         

    # Put the device to sleep if "ON" is published to the "sleep_mode" topic
    - topic: christmas_tree_sensor/sleep_mode
      payload: 'ON'
      then:
        - logger.log: "Sleep mode ON"
        - deep_sleep.enter: deep_sleep_1
  # start flashing the LED green when we connect to MQTT server
  on_connect: 
    then:
      - light.control:
          id: neopixel_light
          state: on
          effect: "Fast Pulse"
          red: 0
          green: 50%
          blue: 0
  # start flashing the LED red if we disconnect from MQTT server          
  on_disconnect: 
    then:
      - light.control:
          id: neopixel_light
          state: on
          effect: "Fast Pulse"
          red: 50%
          green: 0
          blue: 0

# Over-the-air updates
ota:
  - platform: esphome
    password: "<your password here>"

wifi:
  # use_address: christmas_tree_sensor.local
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Christmas Tree Sensor Hotspot"
    password: "<your password here>"
  fast_connect: true

captive_portal:

switch:
  # - platform: gpio
  #   name: "Red LED"
  #   pin: GPIO13 # Red LED
  #   entity_category: 'diagnostic'

  - platform: shutdown
    name: "ESP32 Shutdown"

  - platform: gpio
    entity_category: 'diagnostic'
    name: "Sensor Power"
    pin: GPIO32
    restore_mode: ALWAYS_ON

# Blink if error (fast) or warning (slow), otherwise off
status_led:
  pin: GPIO13 # Red LED

light:
  - platform: neopixelbus
    id: neopixel_light
    entity_category: 'diagnostic'
    type: GRB
    variant: WS2812
    pin: GPIO0
    num_leds: 1
    name: "NeoPixel Light"
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 50%         

sensor:
  - platform: pulse_width
    entity_category: 'diagnostic'
    id: raw_pulse_width
    pin: GPIO14
    unit_of_measurement: "s"
    name: Raw Pulse Width
    update_interval: 0.1s
    accuracy_decimals: 9
    state_class: measurement
    device_class: duration
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
      - throttle: 5s
    expire_after: 30min

  - platform: copy
    entity_category: ''
    id: water_depth_mm
    source_id: raw_pulse_width
    icon: "mdi:water"
    unit_of_measurement: "mm"
    device_class: distance
    name: Water Depth
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - calibrate_linear:
        - 0.000359 -> 109.0
        - 0.000091 -> 20.0
        # - 0.000030 -> 0.0
        # - 0.000078 -> 20.0
        # - 0.000265 -> 90.0
        # - 0.000333 -> 115.0


  - platform: copy
    entity_category: ''
    id: water_percent_full
    source_id: water_depth_mm
    icon: "mdi:water"
    unit_of_measurement: "%"
    name: Water Level Percent
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - lambda: return min(max(x / 115.0 * 100.0, 0.0), 100.0);

  - platform: adc
    id: battery_voltage
    name: Battery Voltage
    device_class: battery
    update_interval: 0.1s
    accuracy_decimals: 2
    attenuation: auto
    pin: GPIO35
    filters:
      - multiply: 2.0 # voltage divider ratio is 1/2
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
      - throttle: 5s

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    device_class: signal_strength
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

deep_sleep:
  id: deep_sleep_1
  run_duration: 3s
  sleep_duration: 15min
  # wakeup_pin: GPIO36 # adds an extra 1.5 mA to deep sleep

binary_sensor:
  - platform: gpio
    name: Toggle Sleep
    entity_category: 'diagnostic'    
    pin:
      number: GPIO38
      mode:
        input: true
      inverted: true
    filters:
       - delayed_on: 10ms
       - delayed_on: 10ms
    on_press:
      then:
        - script.execute:
            id: keep_awake
    on_double_click:
      then:
        - deep_sleep.enter: deep_sleep_1

    